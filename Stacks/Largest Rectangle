// Largest Rectangle
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;
 
class Result {
 
    /*
     * Complete the 'largestRectangle' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts INTEGER_ARRAY h as parameter.
     */
 
    public static long largestRectangle(List<Integer> h) {
    // Write your code here
        Stack<Integer> stack=new Stack<>();
        int nse=0,pse=0,element=0;
        long maxArea=0,area=0;
        for(int i=0;i<h.size();i++)
        {
            while(!stack.isEmpty()&&h.get(stack.peek())>h.get(i))
            {
                nse=i;
                element=stack.pop();
                pse=(stack.isEmpty())?-1:stack.peek();
                area=h.get(element)*(nse-pse-1);
                maxArea=Math.max(maxArea,area);
            }
            stack.push(i);
        }
        while(!stack.isEmpty())
        {
            nse=h.size();
            element=stack.pop();
            pse=(stack.isEmpty())?-1:stack.peek();
            area=h.get(element)*(nse-pse-1);
            maxArea=Math.max(maxArea,area);
        }
        return maxArea;
    }
 
}
 
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
 
        int n = Integer.parseInt(bufferedReader.readLine().trim());
 
        List<Integer> h = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());
 
        long result = Result.largestRectangle(h);
 
        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();
 
        bufferedReader.close();
        bufferedWriter.close();
    }
}

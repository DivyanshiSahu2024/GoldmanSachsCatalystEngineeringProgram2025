//insert-a-node-into-a-sorted-doubly-linked-list

// Problem: https://www.hackerrank.com/challenges/insert-a-node-into-a-sorted-doubly-linked-list/problem


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
 
public class Solution {
 
    static class DoublyLinkedListNode {
        public int data;
        public DoublyLinkedListNode next;
        public DoublyLinkedListNode prev;
 
        public DoublyLinkedListNode(int nodeData) {
            this.data = nodeData;
            this.next = null;
            this.prev = null;
        }
    }
 
    static class DoublyLinkedList {
        public DoublyLinkedListNode head;
        public DoublyLinkedListNode tail;
 
        public DoublyLinkedList() {
            this.head = null;
            this.tail = null;
        }
 
        public void insertNode(int nodeData) {
            DoublyLinkedListNode node = new DoublyLinkedListNode(nodeData);
 
            if (this.head == null) {
                this.head = node;
            } else {
                this.tail.next = node;
                node.prev = this.tail;
            }
 
            this.tail = node;
        }
    }
 
    public static void printDoublyLinkedList(DoublyLinkedListNode node, String sep, BufferedWriter bufferedWriter) throws IOException {
        while (node != null) {
            bufferedWriter.write(String.valueOf(node.data));
 
            node = node.next;
 
            if (node != null) {
                bufferedWriter.write(sep);
            }
        }
    }
 
 
 
    /*
     * Complete the 'sortedInsert' function below.
     *
     * The function is expected to return an INTEGER_DOUBLY_LINKED_LIST.
     * The function accepts following parameters:
     *  1. INTEGER_DOUBLY_LINKED_LIST llist
     *  2. INTEGER data
     */
 
    /*
     * For your reference:
     *
     * DoublyLinkedListNode {
     *     int data;
     *     DoublyLinkedListNode next;
     *     DoublyLinkedListNode prev;
     * }
     *
     */
 
    public static DoublyLinkedListNode sortedInsert(DoublyLinkedListNode llist, int data) {
    // Write your code here
    DoublyLinkedListNode newNode = new DoublyLinkedListNode(data);
            // Case 1: Insert before the head (at the beginning)
            if (llist == null || data < llist.data) {
                newNode.next = llist; // Point new node to the current head
                if (llist != null) {
                    llist.prev = newNode; // Set the previous of the current head to new node
                }
                return newNode; // New node is now the head
            }
            // Case 2: Traverse the list to find the correct position
            DoublyLinkedListNode current = llist;
            while (current.next != null && current.next.data < data) {
                current = current.next; // Move to the next node
            }
            // Insert the new node in the correct position
            newNode.next = current.next; // Link new node to the next node
            newNode.prev = current; // Link new node to the current node
            current.next = newNode; // Link current node to the new node
            // If the new node is not inserted at the end, update the previous pointer of the next node
            if (newNode.next != null) {
                newNode.next.prev = newNode; // Update the previous pointer of the next node
            }
            return llist; // Return the head of the list
 
    }
 
 
    private static final Scanner scanner = new Scanner(System.in);
 
    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
 
        int t = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
 
        for (int tItr = 0; tItr < t; tItr++) {
            DoublyLinkedList llist = new DoublyLinkedList();
 
            int llistCount = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
 
            for (int i = 0; i < llistCount; i++) {
                int llistItem = scanner.nextInt();
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
 
                llist.insertNode(llistItem);
            }
 
            int data = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
 
            DoublyLinkedListNode llist1 = sortedInsert(llist.head, data);
 
            printDoublyLinkedList(llist1, " ", bufferedWriter);
            bufferedWriter.newLine();
        }
 
        bufferedWriter.close();
 
        scanner.close();
    }
}

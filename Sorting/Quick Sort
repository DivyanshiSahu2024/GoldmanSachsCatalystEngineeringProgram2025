//  https://practice.geeksforgeeks.org/problems/quick-sort/1

class Solution {
// Function to perform Quick Sort
public void quickSort(int arr[], int low, int high) {
if (low < high) {
// Find the partition index
int pi = partition(arr, low, high);
// Recursively sort elements before and after partition
quickSort(arr, low, pi - 1);
quickSort(arr, pi + 1, high);
}
}
// Partition function using the last element as pivot
private int partition(int arr[], int low, int high) {
int pivot = arr[high]; // pivot
int i = low - 1; // Index of smaller element
for (int j = low; j < high; j++) {
// If current element is smaller than or equal to pivot
if (arr[j] <= pivot) {
i++;
// Swap arr[i] and arr[j]
int temp = arr[i];
arr[i] = arr[j];
arr[j] = temp;
}
}
// Swap arr[i+1] and arr[high] (or pivot)
int temp = arr[i + 1];
arr[i + 1] = arr[high];
arr[high] = temp;
return i + 1; // Return the partitioning index
}
// Utility function to print the array
public void printArray(int arr[]) {
for (int val : arr)
System.out.print(val + " ");
System.out.println();
}
// Test case to see it in action
public static void main(String[] args) {
Solution sorter = new Solution();
int[] arr = {4, 1, 3, 9, 7};
sorter.quickSort(arr, 0, arr.length - 1);
sorter.printArray(arr); // Output: 1 3 4 7 9
}
}

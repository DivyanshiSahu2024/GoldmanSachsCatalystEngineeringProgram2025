//https://leetcode.com/problems/design-circular-deque/

//design circular deque
class MyCircularDeque {
    Deque<Integer> dq;
    int capacity;
    public MyCircularDeque(int k) {
        dq=new ArrayDeque<>();
        capacity=k;
    }
 
    public boolean insertFront(int value) {
        if(this.isFull())
        return false;
        dq.addFirst(value);
        return true;
    }
 
    public boolean insertLast(int value) {
        if(this.isFull())
        return false;
        dq.addLast(value);
        return true;
    }
 
    public boolean deleteFront() {
        if(this.isEmpty())
        return false;
        dq.removeFirst();
        return true;
    }
 
    public boolean deleteLast() {
        if(this.isEmpty())
        return false;
        dq.removeLast();
        return true;
    }
 
    public int getFront() {
        if (this.isEmpty()) return -1;
        return dq.peekFirst();
    }
 
    public int getRear() {
        if (this.isEmpty()) return -1;
        return dq.peekLast();
    }
 
    public boolean isEmpty() {
        return dq.isEmpty();
    }
 
    public boolean isFull() {
        return dq.size() == capacity;
    }
}
 
/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */
